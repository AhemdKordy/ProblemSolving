#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define endl "\n"
#define ull unsigned long long
#define F first
#define S second
#define Yala_Besor3a ios_base::sync_with_stdio(0),ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)
#define my_sizeof(type) ((char *)(&type+1)-(char*)(&type))
using namespace std;
const int OO = 0x3f3f3f3f,NegOO= -1*OO,N =1e5+5,mod = 1<<31 ;
vector<int>adj[N];
int deg[N];
int n;
string getNodeCanonicalForm(int node,vector<vector<string>>&children)
{
    string ans="(";
    sort(children[node].begin(),children[node].end());
    for(auto u:children[node])ans+=u;
    ans+=")";
    return ans;
}
string treeCanonicalForm()
{
    queue<int>leaves;//leaf nodes
    int remNodes=n;
    for (int i = 0; i < n; ++i) {
        if(adj[i].size()<=1) leaves.push(i);
        else deg[i]=adj[i].size();
    }
    vector<vector<string>>children(n);
    while(remNodes>2){
        int sz=leaves.size();
        while(sz--)
        {
            int v=leaves.front();
            leaves.pop();
            string ans=getNodeCanonicalForm(v,children);
            for(auto parent:adj[v]) {
                children[parent].push_back(ans);
                if (--deg[parent] == 1)leaves.push(parent);
            }
            --remNodes;
        }
 
    }
    int v1=leaves.front();
    leaves.pop();
    int v2=leaves.empty()?-1:leaves.front();
    string s1=getNodeCanonicalForm(v1,children);
    string s2= v2==-1?"":getNodeCanonicalForm(v2,children);
    if(v2==-1)return s1;
    children[v1].push_back(s2);
    children[v2].push_back(s1);
    return min(getNodeCanonicalForm(v1,children),getNodeCanonicalForm(v2,children));
}
void init()
{
    memset(deg,0,n*sizeof(deg[0]));
    for (int i = 0; i < n; ++i) {
        adj[i].clear();
    }
}
int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    Yala_Besor3a;
    int t;
    cin>>t;
    while(t--){
        cin>>n;
        int x,z;
        init();
        for (int i = 0; i < n-1; ++i) {
            cin>>x>>z;
            --x,--z;
            adj[x].push_back(z);
            adj[z].push_back(x);
        }
        string s1=treeCanonicalForm();
        init();
        for (int i = 0; i < n-1; ++i) {
            cin>>x>>z;
            --x,--z;
            adj[x].push_back(z);
            adj[z].push_back(x);
        }
        string s2=treeCanonicalForm();
        puts(s1==s2?"YES":"NO");
    }
    return 0;
} 